// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NattapolChan/ent/predicate"
	"github.com/NattapolChan/ent/propertylisting"
	"github.com/NattapolChan/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePropertyListing = "PropertyListing"
	TypeUser            = "User"
)

// PropertyListingMutation represents an operation that mutates the PropertyListing nodes in the graph.
type PropertyListingMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	houseType         *string
	area              *int
	addarea           *int
	num_of_bedroom    *int
	addnum_of_bedroom *int
	lease_date        *string
	number_of_data    *int
	addnumber_of_data *int
	rental_price      *int
	addrental_price   *int
	y                 *float64
	addy              *float64
	x                 *float64
	addx              *float64
	street            *string
	district          *string
	uuid              *uuid.UUID
	clearedFields     map[string]struct{}
	users             map[string]struct{}
	removedusers      map[string]struct{}
	clearedusers      bool
	done              bool
	oldValue          func(context.Context) (*PropertyListing, error)
	predicates        []predicate.PropertyListing
}

var _ ent.Mutation = (*PropertyListingMutation)(nil)

// propertylistingOption allows management of the mutation configuration using functional options.
type propertylistingOption func(*PropertyListingMutation)

// newPropertyListingMutation creates new mutation for the PropertyListing entity.
func newPropertyListingMutation(c config, op Op, opts ...propertylistingOption) *PropertyListingMutation {
	m := &PropertyListingMutation{
		config:        c,
		op:            op,
		typ:           TypePropertyListing,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPropertyListingID sets the ID field of the mutation.
func withPropertyListingID(id int) propertylistingOption {
	return func(m *PropertyListingMutation) {
		var (
			err   error
			once  sync.Once
			value *PropertyListing
		)
		m.oldValue = func(ctx context.Context) (*PropertyListing, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PropertyListing.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPropertyListing sets the old PropertyListing of the mutation.
func withPropertyListing(node *PropertyListing) propertylistingOption {
	return func(m *PropertyListingMutation) {
		m.oldValue = func(context.Context) (*PropertyListing, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PropertyListingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PropertyListingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PropertyListingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PropertyListingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PropertyListing.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PropertyListingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PropertyListingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PropertyListingMutation) ResetName() {
	m.name = nil
}

// SetHouseType sets the "houseType" field.
func (m *PropertyListingMutation) SetHouseType(s string) {
	m.houseType = &s
}

// HouseType returns the value of the "houseType" field in the mutation.
func (m *PropertyListingMutation) HouseType() (r string, exists bool) {
	v := m.houseType
	if v == nil {
		return
	}
	return *v, true
}

// OldHouseType returns the old "houseType" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldHouseType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHouseType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHouseType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHouseType: %w", err)
	}
	return oldValue.HouseType, nil
}

// ResetHouseType resets all changes to the "houseType" field.
func (m *PropertyListingMutation) ResetHouseType() {
	m.houseType = nil
}

// SetArea sets the "area" field.
func (m *PropertyListingMutation) SetArea(i int) {
	m.area = &i
	m.addarea = nil
}

// Area returns the value of the "area" field in the mutation.
func (m *PropertyListingMutation) Area() (r int, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldArea(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// AddArea adds i to the "area" field.
func (m *PropertyListingMutation) AddArea(i int) {
	if m.addarea != nil {
		*m.addarea += i
	} else {
		m.addarea = &i
	}
}

// AddedArea returns the value that was added to the "area" field in this mutation.
func (m *PropertyListingMutation) AddedArea() (r int, exists bool) {
	v := m.addarea
	if v == nil {
		return
	}
	return *v, true
}

// ResetArea resets all changes to the "area" field.
func (m *PropertyListingMutation) ResetArea() {
	m.area = nil
	m.addarea = nil
}

// SetNumOfBedroom sets the "num_of_bedroom" field.
func (m *PropertyListingMutation) SetNumOfBedroom(i int) {
	m.num_of_bedroom = &i
	m.addnum_of_bedroom = nil
}

// NumOfBedroom returns the value of the "num_of_bedroom" field in the mutation.
func (m *PropertyListingMutation) NumOfBedroom() (r int, exists bool) {
	v := m.num_of_bedroom
	if v == nil {
		return
	}
	return *v, true
}

// OldNumOfBedroom returns the old "num_of_bedroom" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldNumOfBedroom(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumOfBedroom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumOfBedroom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumOfBedroom: %w", err)
	}
	return oldValue.NumOfBedroom, nil
}

// AddNumOfBedroom adds i to the "num_of_bedroom" field.
func (m *PropertyListingMutation) AddNumOfBedroom(i int) {
	if m.addnum_of_bedroom != nil {
		*m.addnum_of_bedroom += i
	} else {
		m.addnum_of_bedroom = &i
	}
}

// AddedNumOfBedroom returns the value that was added to the "num_of_bedroom" field in this mutation.
func (m *PropertyListingMutation) AddedNumOfBedroom() (r int, exists bool) {
	v := m.addnum_of_bedroom
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumOfBedroom resets all changes to the "num_of_bedroom" field.
func (m *PropertyListingMutation) ResetNumOfBedroom() {
	m.num_of_bedroom = nil
	m.addnum_of_bedroom = nil
}

// SetLeaseDate sets the "lease_date" field.
func (m *PropertyListingMutation) SetLeaseDate(s string) {
	m.lease_date = &s
}

// LeaseDate returns the value of the "lease_date" field in the mutation.
func (m *PropertyListingMutation) LeaseDate() (r string, exists bool) {
	v := m.lease_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaseDate returns the old "lease_date" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldLeaseDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaseDate: %w", err)
	}
	return oldValue.LeaseDate, nil
}

// ResetLeaseDate resets all changes to the "lease_date" field.
func (m *PropertyListingMutation) ResetLeaseDate() {
	m.lease_date = nil
}

// SetNumberOfData sets the "number_of_data" field.
func (m *PropertyListingMutation) SetNumberOfData(i int) {
	m.number_of_data = &i
	m.addnumber_of_data = nil
}

// NumberOfData returns the value of the "number_of_data" field in the mutation.
func (m *PropertyListingMutation) NumberOfData() (r int, exists bool) {
	v := m.number_of_data
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfData returns the old "number_of_data" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldNumberOfData(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfData: %w", err)
	}
	return oldValue.NumberOfData, nil
}

// AddNumberOfData adds i to the "number_of_data" field.
func (m *PropertyListingMutation) AddNumberOfData(i int) {
	if m.addnumber_of_data != nil {
		*m.addnumber_of_data += i
	} else {
		m.addnumber_of_data = &i
	}
}

// AddedNumberOfData returns the value that was added to the "number_of_data" field in this mutation.
func (m *PropertyListingMutation) AddedNumberOfData() (r int, exists bool) {
	v := m.addnumber_of_data
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfData resets all changes to the "number_of_data" field.
func (m *PropertyListingMutation) ResetNumberOfData() {
	m.number_of_data = nil
	m.addnumber_of_data = nil
}

// SetRentalPrice sets the "rental_price" field.
func (m *PropertyListingMutation) SetRentalPrice(i int) {
	m.rental_price = &i
	m.addrental_price = nil
}

// RentalPrice returns the value of the "rental_price" field in the mutation.
func (m *PropertyListingMutation) RentalPrice() (r int, exists bool) {
	v := m.rental_price
	if v == nil {
		return
	}
	return *v, true
}

// OldRentalPrice returns the old "rental_price" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldRentalPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRentalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRentalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRentalPrice: %w", err)
	}
	return oldValue.RentalPrice, nil
}

// AddRentalPrice adds i to the "rental_price" field.
func (m *PropertyListingMutation) AddRentalPrice(i int) {
	if m.addrental_price != nil {
		*m.addrental_price += i
	} else {
		m.addrental_price = &i
	}
}

// AddedRentalPrice returns the value that was added to the "rental_price" field in this mutation.
func (m *PropertyListingMutation) AddedRentalPrice() (r int, exists bool) {
	v := m.addrental_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetRentalPrice resets all changes to the "rental_price" field.
func (m *PropertyListingMutation) ResetRentalPrice() {
	m.rental_price = nil
	m.addrental_price = nil
}

// SetY sets the "y" field.
func (m *PropertyListingMutation) SetY(f float64) {
	m.y = &f
	m.addy = nil
}

// Y returns the value of the "y" field in the mutation.
func (m *PropertyListingMutation) Y() (r float64, exists bool) {
	v := m.y
	if v == nil {
		return
	}
	return *v, true
}

// OldY returns the old "y" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldY(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldY is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldY requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldY: %w", err)
	}
	return oldValue.Y, nil
}

// AddY adds f to the "y" field.
func (m *PropertyListingMutation) AddY(f float64) {
	if m.addy != nil {
		*m.addy += f
	} else {
		m.addy = &f
	}
}

// AddedY returns the value that was added to the "y" field in this mutation.
func (m *PropertyListingMutation) AddedY() (r float64, exists bool) {
	v := m.addy
	if v == nil {
		return
	}
	return *v, true
}

// ResetY resets all changes to the "y" field.
func (m *PropertyListingMutation) ResetY() {
	m.y = nil
	m.addy = nil
}

// SetX sets the "x" field.
func (m *PropertyListingMutation) SetX(f float64) {
	m.x = &f
	m.addx = nil
}

// X returns the value of the "x" field in the mutation.
func (m *PropertyListingMutation) X() (r float64, exists bool) {
	v := m.x
	if v == nil {
		return
	}
	return *v, true
}

// OldX returns the old "x" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldX(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldX is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldX requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldX: %w", err)
	}
	return oldValue.X, nil
}

// AddX adds f to the "x" field.
func (m *PropertyListingMutation) AddX(f float64) {
	if m.addx != nil {
		*m.addx += f
	} else {
		m.addx = &f
	}
}

// AddedX returns the value that was added to the "x" field in this mutation.
func (m *PropertyListingMutation) AddedX() (r float64, exists bool) {
	v := m.addx
	if v == nil {
		return
	}
	return *v, true
}

// ResetX resets all changes to the "x" field.
func (m *PropertyListingMutation) ResetX() {
	m.x = nil
	m.addx = nil
}

// SetStreet sets the "street" field.
func (m *PropertyListingMutation) SetStreet(s string) {
	m.street = &s
}

// Street returns the value of the "street" field in the mutation.
func (m *PropertyListingMutation) Street() (r string, exists bool) {
	v := m.street
	if v == nil {
		return
	}
	return *v, true
}

// OldStreet returns the old "street" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldStreet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreet: %w", err)
	}
	return oldValue.Street, nil
}

// ClearStreet clears the value of the "street" field.
func (m *PropertyListingMutation) ClearStreet() {
	m.street = nil
	m.clearedFields[propertylisting.FieldStreet] = struct{}{}
}

// StreetCleared returns if the "street" field was cleared in this mutation.
func (m *PropertyListingMutation) StreetCleared() bool {
	_, ok := m.clearedFields[propertylisting.FieldStreet]
	return ok
}

// ResetStreet resets all changes to the "street" field.
func (m *PropertyListingMutation) ResetStreet() {
	m.street = nil
	delete(m.clearedFields, propertylisting.FieldStreet)
}

// SetDistrict sets the "district" field.
func (m *PropertyListingMutation) SetDistrict(s string) {
	m.district = &s
}

// District returns the value of the "district" field in the mutation.
func (m *PropertyListingMutation) District() (r string, exists bool) {
	v := m.district
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrict returns the old "district" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldDistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistrict is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrict: %w", err)
	}
	return oldValue.District, nil
}

// ResetDistrict resets all changes to the "district" field.
func (m *PropertyListingMutation) ResetDistrict() {
	m.district = nil
}

// SetUUID sets the "uuid" field.
func (m *PropertyListingMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *PropertyListingMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the PropertyListing entity.
// If the PropertyListing object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PropertyListingMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *PropertyListingMutation) ResetUUID() {
	m.uuid = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *PropertyListingMutation) AddUserIDs(ids ...string) {
	if m.users == nil {
		m.users = make(map[string]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *PropertyListingMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *PropertyListingMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *PropertyListingMutation) RemoveUserIDs(ids ...string) {
	if m.removedusers == nil {
		m.removedusers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *PropertyListingMutation) RemovedUsersIDs() (ids []string) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *PropertyListingMutation) UsersIDs() (ids []string) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *PropertyListingMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the PropertyListingMutation builder.
func (m *PropertyListingMutation) Where(ps ...predicate.PropertyListing) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PropertyListingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PropertyListingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PropertyListing, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PropertyListingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PropertyListingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PropertyListing).
func (m *PropertyListingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PropertyListingMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.name != nil {
		fields = append(fields, propertylisting.FieldName)
	}
	if m.houseType != nil {
		fields = append(fields, propertylisting.FieldHouseType)
	}
	if m.area != nil {
		fields = append(fields, propertylisting.FieldArea)
	}
	if m.num_of_bedroom != nil {
		fields = append(fields, propertylisting.FieldNumOfBedroom)
	}
	if m.lease_date != nil {
		fields = append(fields, propertylisting.FieldLeaseDate)
	}
	if m.number_of_data != nil {
		fields = append(fields, propertylisting.FieldNumberOfData)
	}
	if m.rental_price != nil {
		fields = append(fields, propertylisting.FieldRentalPrice)
	}
	if m.y != nil {
		fields = append(fields, propertylisting.FieldY)
	}
	if m.x != nil {
		fields = append(fields, propertylisting.FieldX)
	}
	if m.street != nil {
		fields = append(fields, propertylisting.FieldStreet)
	}
	if m.district != nil {
		fields = append(fields, propertylisting.FieldDistrict)
	}
	if m.uuid != nil {
		fields = append(fields, propertylisting.FieldUUID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PropertyListingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case propertylisting.FieldName:
		return m.Name()
	case propertylisting.FieldHouseType:
		return m.HouseType()
	case propertylisting.FieldArea:
		return m.Area()
	case propertylisting.FieldNumOfBedroom:
		return m.NumOfBedroom()
	case propertylisting.FieldLeaseDate:
		return m.LeaseDate()
	case propertylisting.FieldNumberOfData:
		return m.NumberOfData()
	case propertylisting.FieldRentalPrice:
		return m.RentalPrice()
	case propertylisting.FieldY:
		return m.Y()
	case propertylisting.FieldX:
		return m.X()
	case propertylisting.FieldStreet:
		return m.Street()
	case propertylisting.FieldDistrict:
		return m.District()
	case propertylisting.FieldUUID:
		return m.UUID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PropertyListingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case propertylisting.FieldName:
		return m.OldName(ctx)
	case propertylisting.FieldHouseType:
		return m.OldHouseType(ctx)
	case propertylisting.FieldArea:
		return m.OldArea(ctx)
	case propertylisting.FieldNumOfBedroom:
		return m.OldNumOfBedroom(ctx)
	case propertylisting.FieldLeaseDate:
		return m.OldLeaseDate(ctx)
	case propertylisting.FieldNumberOfData:
		return m.OldNumberOfData(ctx)
	case propertylisting.FieldRentalPrice:
		return m.OldRentalPrice(ctx)
	case propertylisting.FieldY:
		return m.OldY(ctx)
	case propertylisting.FieldX:
		return m.OldX(ctx)
	case propertylisting.FieldStreet:
		return m.OldStreet(ctx)
	case propertylisting.FieldDistrict:
		return m.OldDistrict(ctx)
	case propertylisting.FieldUUID:
		return m.OldUUID(ctx)
	}
	return nil, fmt.Errorf("unknown PropertyListing field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PropertyListingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case propertylisting.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case propertylisting.FieldHouseType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHouseType(v)
		return nil
	case propertylisting.FieldArea:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case propertylisting.FieldNumOfBedroom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumOfBedroom(v)
		return nil
	case propertylisting.FieldLeaseDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaseDate(v)
		return nil
	case propertylisting.FieldNumberOfData:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfData(v)
		return nil
	case propertylisting.FieldRentalPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRentalPrice(v)
		return nil
	case propertylisting.FieldY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetY(v)
		return nil
	case propertylisting.FieldX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetX(v)
		return nil
	case propertylisting.FieldStreet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreet(v)
		return nil
	case propertylisting.FieldDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrict(v)
		return nil
	case propertylisting.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	}
	return fmt.Errorf("unknown PropertyListing field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PropertyListingMutation) AddedFields() []string {
	var fields []string
	if m.addarea != nil {
		fields = append(fields, propertylisting.FieldArea)
	}
	if m.addnum_of_bedroom != nil {
		fields = append(fields, propertylisting.FieldNumOfBedroom)
	}
	if m.addnumber_of_data != nil {
		fields = append(fields, propertylisting.FieldNumberOfData)
	}
	if m.addrental_price != nil {
		fields = append(fields, propertylisting.FieldRentalPrice)
	}
	if m.addy != nil {
		fields = append(fields, propertylisting.FieldY)
	}
	if m.addx != nil {
		fields = append(fields, propertylisting.FieldX)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PropertyListingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case propertylisting.FieldArea:
		return m.AddedArea()
	case propertylisting.FieldNumOfBedroom:
		return m.AddedNumOfBedroom()
	case propertylisting.FieldNumberOfData:
		return m.AddedNumberOfData()
	case propertylisting.FieldRentalPrice:
		return m.AddedRentalPrice()
	case propertylisting.FieldY:
		return m.AddedY()
	case propertylisting.FieldX:
		return m.AddedX()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PropertyListingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case propertylisting.FieldArea:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArea(v)
		return nil
	case propertylisting.FieldNumOfBedroom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumOfBedroom(v)
		return nil
	case propertylisting.FieldNumberOfData:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfData(v)
		return nil
	case propertylisting.FieldRentalPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRentalPrice(v)
		return nil
	case propertylisting.FieldY:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddY(v)
		return nil
	case propertylisting.FieldX:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddX(v)
		return nil
	}
	return fmt.Errorf("unknown PropertyListing numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PropertyListingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(propertylisting.FieldStreet) {
		fields = append(fields, propertylisting.FieldStreet)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PropertyListingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PropertyListingMutation) ClearField(name string) error {
	switch name {
	case propertylisting.FieldStreet:
		m.ClearStreet()
		return nil
	}
	return fmt.Errorf("unknown PropertyListing nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PropertyListingMutation) ResetField(name string) error {
	switch name {
	case propertylisting.FieldName:
		m.ResetName()
		return nil
	case propertylisting.FieldHouseType:
		m.ResetHouseType()
		return nil
	case propertylisting.FieldArea:
		m.ResetArea()
		return nil
	case propertylisting.FieldNumOfBedroom:
		m.ResetNumOfBedroom()
		return nil
	case propertylisting.FieldLeaseDate:
		m.ResetLeaseDate()
		return nil
	case propertylisting.FieldNumberOfData:
		m.ResetNumberOfData()
		return nil
	case propertylisting.FieldRentalPrice:
		m.ResetRentalPrice()
		return nil
	case propertylisting.FieldY:
		m.ResetY()
		return nil
	case propertylisting.FieldX:
		m.ResetX()
		return nil
	case propertylisting.FieldStreet:
		m.ResetStreet()
		return nil
	case propertylisting.FieldDistrict:
		m.ResetDistrict()
		return nil
	case propertylisting.FieldUUID:
		m.ResetUUID()
		return nil
	}
	return fmt.Errorf("unknown PropertyListing field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PropertyListingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, propertylisting.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PropertyListingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case propertylisting.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PropertyListingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, propertylisting.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PropertyListingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case propertylisting.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PropertyListingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, propertylisting.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PropertyListingMutation) EdgeCleared(name string) bool {
	switch name {
	case propertylisting.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PropertyListingMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PropertyListing unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PropertyListingMutation) ResetEdge(name string) error {
	switch name {
	case propertylisting.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown PropertyListing edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	name                    *string
	emailAddr               *string
	favorites               *[]string
	appendfavorites         []string
	clearedFields           map[string]struct{}
	propertylistings        map[int]struct{}
	removedpropertylistings map[int]struct{}
	clearedpropertylistings bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmailAddr sets the "emailAddr" field.
func (m *UserMutation) SetEmailAddr(s string) {
	m.emailAddr = &s
}

// EmailAddr returns the value of the "emailAddr" field in the mutation.
func (m *UserMutation) EmailAddr() (r string, exists bool) {
	v := m.emailAddr
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddr returns the old "emailAddr" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddr: %w", err)
	}
	return oldValue.EmailAddr, nil
}

// ResetEmailAddr resets all changes to the "emailAddr" field.
func (m *UserMutation) ResetEmailAddr() {
	m.emailAddr = nil
}

// SetFavorites sets the "favorites" field.
func (m *UserMutation) SetFavorites(s []string) {
	m.favorites = &s
	m.appendfavorites = nil
}

// Favorites returns the value of the "favorites" field in the mutation.
func (m *UserMutation) Favorites() (r []string, exists bool) {
	v := m.favorites
	if v == nil {
		return
	}
	return *v, true
}

// OldFavorites returns the old "favorites" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFavorites(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavorites is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavorites requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavorites: %w", err)
	}
	return oldValue.Favorites, nil
}

// AppendFavorites adds s to the "favorites" field.
func (m *UserMutation) AppendFavorites(s []string) {
	m.appendfavorites = append(m.appendfavorites, s...)
}

// AppendedFavorites returns the list of values that were appended to the "favorites" field in this mutation.
func (m *UserMutation) AppendedFavorites() ([]string, bool) {
	if len(m.appendfavorites) == 0 {
		return nil, false
	}
	return m.appendfavorites, true
}

// ResetFavorites resets all changes to the "favorites" field.
func (m *UserMutation) ResetFavorites() {
	m.favorites = nil
	m.appendfavorites = nil
}

// AddPropertylistingIDs adds the "propertylistings" edge to the PropertyListing entity by ids.
func (m *UserMutation) AddPropertylistingIDs(ids ...int) {
	if m.propertylistings == nil {
		m.propertylistings = make(map[int]struct{})
	}
	for i := range ids {
		m.propertylistings[ids[i]] = struct{}{}
	}
}

// ClearPropertylistings clears the "propertylistings" edge to the PropertyListing entity.
func (m *UserMutation) ClearPropertylistings() {
	m.clearedpropertylistings = true
}

// PropertylistingsCleared reports if the "propertylistings" edge to the PropertyListing entity was cleared.
func (m *UserMutation) PropertylistingsCleared() bool {
	return m.clearedpropertylistings
}

// RemovePropertylistingIDs removes the "propertylistings" edge to the PropertyListing entity by IDs.
func (m *UserMutation) RemovePropertylistingIDs(ids ...int) {
	if m.removedpropertylistings == nil {
		m.removedpropertylistings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.propertylistings, ids[i])
		m.removedpropertylistings[ids[i]] = struct{}{}
	}
}

// RemovedPropertylistings returns the removed IDs of the "propertylistings" edge to the PropertyListing entity.
func (m *UserMutation) RemovedPropertylistingsIDs() (ids []int) {
	for id := range m.removedpropertylistings {
		ids = append(ids, id)
	}
	return
}

// PropertylistingsIDs returns the "propertylistings" edge IDs in the mutation.
func (m *UserMutation) PropertylistingsIDs() (ids []int) {
	for id := range m.propertylistings {
		ids = append(ids, id)
	}
	return
}

// ResetPropertylistings resets all changes to the "propertylistings" edge.
func (m *UserMutation) ResetPropertylistings() {
	m.propertylistings = nil
	m.clearedpropertylistings = false
	m.removedpropertylistings = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.emailAddr != nil {
		fields = append(fields, user.FieldEmailAddr)
	}
	if m.favorites != nil {
		fields = append(fields, user.FieldFavorites)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmailAddr:
		return m.EmailAddr()
	case user.FieldFavorites:
		return m.Favorites()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmailAddr:
		return m.OldEmailAddr(ctx)
	case user.FieldFavorites:
		return m.OldFavorites(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmailAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddr(v)
		return nil
	case user.FieldFavorites:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavorites(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmailAddr:
		m.ResetEmailAddr()
		return nil
	case user.FieldFavorites:
		m.ResetFavorites()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.propertylistings != nil {
		edges = append(edges, user.EdgePropertylistings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePropertylistings:
		ids := make([]ent.Value, 0, len(m.propertylistings))
		for id := range m.propertylistings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpropertylistings != nil {
		edges = append(edges, user.EdgePropertylistings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePropertylistings:
		ids := make([]ent.Value, 0, len(m.removedpropertylistings))
		for id := range m.removedpropertylistings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpropertylistings {
		edges = append(edges, user.EdgePropertylistings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePropertylistings:
		return m.clearedpropertylistings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePropertylistings:
		m.ResetPropertylistings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
