// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// PropertyListingsColumns holds the columns for the "property_listings" table.
	PropertyListingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "house_type", Type: field.TypeString},
		{Name: "area", Type: field.TypeInt, Default: 0},
		{Name: "num_of_bedroom", Type: field.TypeInt},
		{Name: "lease_date", Type: field.TypeString},
		{Name: "number_of_data", Type: field.TypeInt},
		{Name: "rental_price", Type: field.TypeInt},
		{Name: "y", Type: field.TypeFloat64},
		{Name: "x", Type: field.TypeFloat64},
		{Name: "street", Type: field.TypeString, Nullable: true},
		{Name: "district", Type: field.TypeString},
		{Name: "uuid", Type: field.TypeUUID},
	}
	// PropertyListingsTable holds the schema information for the "property_listings" table.
	PropertyListingsTable = &schema.Table{
		Name:       "property_listings",
		Columns:    PropertyListingsColumns,
		PrimaryKey: []*schema.Column{PropertyListingsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email_addr", Type: field.TypeString},
		{Name: "favorites", Type: field.TypeJSON},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserPropertylistingsColumns holds the columns for the "user_propertylistings" table.
	UserPropertylistingsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "property_listing_id", Type: field.TypeInt},
	}
	// UserPropertylistingsTable holds the schema information for the "user_propertylistings" table.
	UserPropertylistingsTable = &schema.Table{
		Name:       "user_propertylistings",
		Columns:    UserPropertylistingsColumns,
		PrimaryKey: []*schema.Column{UserPropertylistingsColumns[0], UserPropertylistingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_propertylistings_user_id",
				Columns:    []*schema.Column{UserPropertylistingsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_propertylistings_property_listing_id",
				Columns:    []*schema.Column{UserPropertylistingsColumns[1]},
				RefColumns: []*schema.Column{PropertyListingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PropertyListingsTable,
		UsersTable,
		UserPropertylistingsTable,
	}
)

func init() {
	UserPropertylistingsTable.ForeignKeys[0].RefTable = UsersTable
	UserPropertylistingsTable.ForeignKeys[1].RefTable = PropertyListingsTable
}
