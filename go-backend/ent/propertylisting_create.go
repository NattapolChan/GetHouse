// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NattapolChan/ent/propertylisting"
	"github.com/NattapolChan/ent/user"
	"github.com/google/uuid"
)

// PropertyListingCreate is the builder for creating a PropertyListing entity.
type PropertyListingCreate struct {
	config
	mutation *PropertyListingMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (plc *PropertyListingCreate) SetName(s string) *PropertyListingCreate {
	plc.mutation.SetName(s)
	return plc
}

// SetHouseType sets the "houseType" field.
func (plc *PropertyListingCreate) SetHouseType(s string) *PropertyListingCreate {
	plc.mutation.SetHouseType(s)
	return plc
}

// SetArea sets the "area" field.
func (plc *PropertyListingCreate) SetArea(i int) *PropertyListingCreate {
	plc.mutation.SetArea(i)
	return plc
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (plc *PropertyListingCreate) SetNillableArea(i *int) *PropertyListingCreate {
	if i != nil {
		plc.SetArea(*i)
	}
	return plc
}

// SetNumOfBedroom sets the "num_of_bedroom" field.
func (plc *PropertyListingCreate) SetNumOfBedroom(i int) *PropertyListingCreate {
	plc.mutation.SetNumOfBedroom(i)
	return plc
}

// SetLeaseDate sets the "lease_date" field.
func (plc *PropertyListingCreate) SetLeaseDate(s string) *PropertyListingCreate {
	plc.mutation.SetLeaseDate(s)
	return plc
}

// SetNumberOfData sets the "number_of_data" field.
func (plc *PropertyListingCreate) SetNumberOfData(i int) *PropertyListingCreate {
	plc.mutation.SetNumberOfData(i)
	return plc
}

// SetRentalPrice sets the "rental_price" field.
func (plc *PropertyListingCreate) SetRentalPrice(i int) *PropertyListingCreate {
	plc.mutation.SetRentalPrice(i)
	return plc
}

// SetY sets the "y" field.
func (plc *PropertyListingCreate) SetY(f float64) *PropertyListingCreate {
	plc.mutation.SetY(f)
	return plc
}

// SetX sets the "x" field.
func (plc *PropertyListingCreate) SetX(f float64) *PropertyListingCreate {
	plc.mutation.SetX(f)
	return plc
}

// SetStreet sets the "street" field.
func (plc *PropertyListingCreate) SetStreet(s string) *PropertyListingCreate {
	plc.mutation.SetStreet(s)
	return plc
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (plc *PropertyListingCreate) SetNillableStreet(s *string) *PropertyListingCreate {
	if s != nil {
		plc.SetStreet(*s)
	}
	return plc
}

// SetDistrict sets the "district" field.
func (plc *PropertyListingCreate) SetDistrict(s string) *PropertyListingCreate {
	plc.mutation.SetDistrict(s)
	return plc
}

// SetUUID sets the "uuid" field.
func (plc *PropertyListingCreate) SetUUID(u uuid.UUID) *PropertyListingCreate {
	plc.mutation.SetUUID(u)
	return plc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (plc *PropertyListingCreate) SetNillableUUID(u *uuid.UUID) *PropertyListingCreate {
	if u != nil {
		plc.SetUUID(*u)
	}
	return plc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (plc *PropertyListingCreate) AddUserIDs(ids ...string) *PropertyListingCreate {
	plc.mutation.AddUserIDs(ids...)
	return plc
}

// AddUsers adds the "users" edges to the User entity.
func (plc *PropertyListingCreate) AddUsers(u ...*User) *PropertyListingCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return plc.AddUserIDs(ids...)
}

// Mutation returns the PropertyListingMutation object of the builder.
func (plc *PropertyListingCreate) Mutation() *PropertyListingMutation {
	return plc.mutation
}

// Save creates the PropertyListing in the database.
func (plc *PropertyListingCreate) Save(ctx context.Context) (*PropertyListing, error) {
	plc.defaults()
	return withHooks(ctx, plc.sqlSave, plc.mutation, plc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PropertyListingCreate) SaveX(ctx context.Context) *PropertyListing {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PropertyListingCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PropertyListingCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plc *PropertyListingCreate) defaults() {
	if _, ok := plc.mutation.Area(); !ok {
		v := propertylisting.DefaultArea
		plc.mutation.SetArea(v)
	}
	if _, ok := plc.mutation.UUID(); !ok {
		v := propertylisting.DefaultUUID()
		plc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *PropertyListingCreate) check() error {
	if _, ok := plc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PropertyListing.name"`)}
	}
	if _, ok := plc.mutation.HouseType(); !ok {
		return &ValidationError{Name: "houseType", err: errors.New(`ent: missing required field "PropertyListing.houseType"`)}
	}
	if _, ok := plc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "PropertyListing.area"`)}
	}
	if _, ok := plc.mutation.NumOfBedroom(); !ok {
		return &ValidationError{Name: "num_of_bedroom", err: errors.New(`ent: missing required field "PropertyListing.num_of_bedroom"`)}
	}
	if _, ok := plc.mutation.LeaseDate(); !ok {
		return &ValidationError{Name: "lease_date", err: errors.New(`ent: missing required field "PropertyListing.lease_date"`)}
	}
	if v, ok := plc.mutation.LeaseDate(); ok {
		if err := propertylisting.LeaseDateValidator(v); err != nil {
			return &ValidationError{Name: "lease_date", err: fmt.Errorf(`ent: validator failed for field "PropertyListing.lease_date": %w`, err)}
		}
	}
	if _, ok := plc.mutation.NumberOfData(); !ok {
		return &ValidationError{Name: "number_of_data", err: errors.New(`ent: missing required field "PropertyListing.number_of_data"`)}
	}
	if _, ok := plc.mutation.RentalPrice(); !ok {
		return &ValidationError{Name: "rental_price", err: errors.New(`ent: missing required field "PropertyListing.rental_price"`)}
	}
	if _, ok := plc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "PropertyListing.y"`)}
	}
	if _, ok := plc.mutation.X(); !ok {
		return &ValidationError{Name: "x", err: errors.New(`ent: missing required field "PropertyListing.x"`)}
	}
	if _, ok := plc.mutation.District(); !ok {
		return &ValidationError{Name: "district", err: errors.New(`ent: missing required field "PropertyListing.district"`)}
	}
	if _, ok := plc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "PropertyListing.uuid"`)}
	}
	return nil
}

func (plc *PropertyListingCreate) sqlSave(ctx context.Context) (*PropertyListing, error) {
	if err := plc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	plc.mutation.id = &_node.ID
	plc.mutation.done = true
	return _node, nil
}

func (plc *PropertyListingCreate) createSpec() (*PropertyListing, *sqlgraph.CreateSpec) {
	var (
		_node = &PropertyListing{config: plc.config}
		_spec = sqlgraph.NewCreateSpec(propertylisting.Table, sqlgraph.NewFieldSpec(propertylisting.FieldID, field.TypeInt))
	)
	if value, ok := plc.mutation.Name(); ok {
		_spec.SetField(propertylisting.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := plc.mutation.HouseType(); ok {
		_spec.SetField(propertylisting.FieldHouseType, field.TypeString, value)
		_node.HouseType = value
	}
	if value, ok := plc.mutation.Area(); ok {
		_spec.SetField(propertylisting.FieldArea, field.TypeInt, value)
		_node.Area = value
	}
	if value, ok := plc.mutation.NumOfBedroom(); ok {
		_spec.SetField(propertylisting.FieldNumOfBedroom, field.TypeInt, value)
		_node.NumOfBedroom = value
	}
	if value, ok := plc.mutation.LeaseDate(); ok {
		_spec.SetField(propertylisting.FieldLeaseDate, field.TypeString, value)
		_node.LeaseDate = value
	}
	if value, ok := plc.mutation.NumberOfData(); ok {
		_spec.SetField(propertylisting.FieldNumberOfData, field.TypeInt, value)
		_node.NumberOfData = value
	}
	if value, ok := plc.mutation.RentalPrice(); ok {
		_spec.SetField(propertylisting.FieldRentalPrice, field.TypeInt, value)
		_node.RentalPrice = value
	}
	if value, ok := plc.mutation.Y(); ok {
		_spec.SetField(propertylisting.FieldY, field.TypeFloat64, value)
		_node.Y = value
	}
	if value, ok := plc.mutation.X(); ok {
		_spec.SetField(propertylisting.FieldX, field.TypeFloat64, value)
		_node.X = value
	}
	if value, ok := plc.mutation.Street(); ok {
		_spec.SetField(propertylisting.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := plc.mutation.District(); ok {
		_spec.SetField(propertylisting.FieldDistrict, field.TypeString, value)
		_node.District = value
	}
	if value, ok := plc.mutation.UUID(); ok {
		_spec.SetField(propertylisting.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if nodes := plc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   propertylisting.UsersTable,
			Columns: propertylisting.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PropertyListingCreateBulk is the builder for creating many PropertyListing entities in bulk.
type PropertyListingCreateBulk struct {
	config
	err      error
	builders []*PropertyListingCreate
}

// Save creates the PropertyListing entities in the database.
func (plcb *PropertyListingCreateBulk) Save(ctx context.Context) ([]*PropertyListing, error) {
	if plcb.err != nil {
		return nil, plcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PropertyListing, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PropertyListingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PropertyListingCreateBulk) SaveX(ctx context.Context) []*PropertyListing {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PropertyListingCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PropertyListingCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}
