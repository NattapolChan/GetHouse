// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/NattapolChan/ent/propertylisting"
	"github.com/google/uuid"
)

// PropertyListing is the model entity for the PropertyListing schema.
type PropertyListing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// HouseType holds the value of the "houseType" field.
	HouseType string `json:"houseType,omitempty"`
	// Area holds the value of the "area" field.
	Area int `json:"area,omitempty"`
	// NumOfBedroom holds the value of the "num_of_bedroom" field.
	NumOfBedroom int `json:"num_of_bedroom,omitempty"`
	// LeaseDate holds the value of the "lease_date" field.
	LeaseDate string `json:"lease_date,omitempty"`
	// NumberOfData holds the value of the "number_of_data" field.
	NumberOfData int `json:"number_of_data,omitempty"`
	// RentalPrice holds the value of the "rental_price" field.
	RentalPrice int `json:"rental_price,omitempty"`
	// Y holds the value of the "y" field.
	Y float64 `json:"y,omitempty"`
	// X holds the value of the "x" field.
	X float64 `json:"x,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// District holds the value of the "district" field.
	District string `json:"district,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PropertyListingQuery when eager-loading is set.
	Edges        PropertyListingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PropertyListingEdges holds the relations/edges for other nodes in the graph.
type PropertyListingEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e PropertyListingEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PropertyListing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case propertylisting.FieldY, propertylisting.FieldX:
			values[i] = new(sql.NullFloat64)
		case propertylisting.FieldID, propertylisting.FieldArea, propertylisting.FieldNumOfBedroom, propertylisting.FieldNumberOfData, propertylisting.FieldRentalPrice:
			values[i] = new(sql.NullInt64)
		case propertylisting.FieldName, propertylisting.FieldHouseType, propertylisting.FieldLeaseDate, propertylisting.FieldStreet, propertylisting.FieldDistrict:
			values[i] = new(sql.NullString)
		case propertylisting.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PropertyListing fields.
func (pl *PropertyListing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case propertylisting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case propertylisting.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case propertylisting.FieldHouseType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field houseType", values[i])
			} else if value.Valid {
				pl.HouseType = value.String
			}
		case propertylisting.FieldArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				pl.Area = int(value.Int64)
			}
		case propertylisting.FieldNumOfBedroom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_of_bedroom", values[i])
			} else if value.Valid {
				pl.NumOfBedroom = int(value.Int64)
			}
		case propertylisting.FieldLeaseDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lease_date", values[i])
			} else if value.Valid {
				pl.LeaseDate = value.String
			}
		case propertylisting.FieldNumberOfData:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_data", values[i])
			} else if value.Valid {
				pl.NumberOfData = int(value.Int64)
			}
		case propertylisting.FieldRentalPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rental_price", values[i])
			} else if value.Valid {
				pl.RentalPrice = int(value.Int64)
			}
		case propertylisting.FieldY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				pl.Y = value.Float64
			}
		case propertylisting.FieldX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				pl.X = value.Float64
			}
		case propertylisting.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				pl.Street = value.String
			}
		case propertylisting.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field district", values[i])
			} else if value.Valid {
				pl.District = value.String
			}
		case propertylisting.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				pl.UUID = *value
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PropertyListing.
// This includes values selected through modifiers, order, etc.
func (pl *PropertyListing) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the PropertyListing entity.
func (pl *PropertyListing) QueryUsers() *UserQuery {
	return NewPropertyListingClient(pl.config).QueryUsers(pl)
}

// Update returns a builder for updating this PropertyListing.
// Note that you need to call PropertyListing.Unwrap() before calling this method if this PropertyListing
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PropertyListing) Update() *PropertyListingUpdateOne {
	return NewPropertyListingClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the PropertyListing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PropertyListing) Unwrap() *PropertyListing {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PropertyListing is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PropertyListing) String() string {
	var builder strings.Builder
	builder.WriteString("PropertyListing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("houseType=")
	builder.WriteString(pl.HouseType)
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(fmt.Sprintf("%v", pl.Area))
	builder.WriteString(", ")
	builder.WriteString("num_of_bedroom=")
	builder.WriteString(fmt.Sprintf("%v", pl.NumOfBedroom))
	builder.WriteString(", ")
	builder.WriteString("lease_date=")
	builder.WriteString(pl.LeaseDate)
	builder.WriteString(", ")
	builder.WriteString("number_of_data=")
	builder.WriteString(fmt.Sprintf("%v", pl.NumberOfData))
	builder.WriteString(", ")
	builder.WriteString("rental_price=")
	builder.WriteString(fmt.Sprintf("%v", pl.RentalPrice))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(fmt.Sprintf("%v", pl.Y))
	builder.WriteString(", ")
	builder.WriteString("x=")
	builder.WriteString(fmt.Sprintf("%v", pl.X))
	builder.WriteString(", ")
	builder.WriteString("street=")
	builder.WriteString(pl.Street)
	builder.WriteString(", ")
	builder.WriteString("district=")
	builder.WriteString(pl.District)
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", pl.UUID))
	builder.WriteByte(')')
	return builder.String()
}

// PropertyListings is a parsable slice of PropertyListing.
type PropertyListings []*PropertyListing
