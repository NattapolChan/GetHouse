// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmailAddr holds the string denoting the emailaddr field in the database.
	FieldEmailAddr = "email_addr"
	// FieldFavorites holds the string denoting the favorites field in the database.
	FieldFavorites = "favorites"
	// EdgePropertylistings holds the string denoting the propertylistings edge name in mutations.
	EdgePropertylistings = "propertylistings"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PropertylistingsTable is the table that holds the propertylistings relation/edge. The primary key declared below.
	PropertylistingsTable = "user_propertylistings"
	// PropertylistingsInverseTable is the table name for the PropertyListing entity.
	// It exists in this package in order to avoid circular dependency with the "propertylisting" package.
	PropertylistingsInverseTable = "property_listings"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmailAddr,
	FieldFavorites,
}

var (
	// PropertylistingsPrimaryKey and PropertylistingsColumn2 are the table columns denoting the
	// primary key for the propertylistings relation (M2M).
	PropertylistingsPrimaryKey = []string{"user_id", "property_listing_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailAddrValidator is a validator for the "emailAddr" field. It is called by the builders before save.
	EmailAddrValidator func(string) error
	// DefaultFavorites holds the default value on creation for the "favorites" field.
	DefaultFavorites []string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmailAddr orders the results by the emailAddr field.
func ByEmailAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailAddr, opts...).ToFunc()
}

// ByPropertylistingsCount orders the results by propertylistings count.
func ByPropertylistingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPropertylistingsStep(), opts...)
	}
}

// ByPropertylistings orders the results by propertylistings terms.
func ByPropertylistings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPropertylistingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPropertylistingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PropertylistingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PropertylistingsTable, PropertylistingsPrimaryKey...),
	)
}
